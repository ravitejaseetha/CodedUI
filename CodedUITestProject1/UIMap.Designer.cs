// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITest.Input;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.DirectUIControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WindowsRuntimeControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = Microsoft.VisualStudio.TestTools.UITest.Input.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            XamlText uIRAPReportText = this.UIPTSWindow.UIRAPReportText;
            #endregion

            // Verify that the 'Name' property of 'RAP Report' label equals 'RAP Report'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIRAPReportTextName, uIRAPReportText.Name);
        }
        
        /// <summary>
        /// LoginAssert - Use 'LoginAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void LoginAssert()
        {
            #region Variable Declarations
            XamlText uILoginText = this.UIPTSWindow.UILoginText;
            #endregion

            // Verify that the 'Name' property of 'Login' label equals 'Login'
            Assert.AreEqual(this.LoginAssertExpectedValues.UILoginTextName, uILoginText.Name, "Login page not found");
        }
        
        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual LoginAssertExpectedValues LoginAssertExpectedValues
        {
            get
            {
                if ((this.mLoginAssertExpectedValues == null))
                {
                    this.mLoginAssertExpectedValues = new LoginAssertExpectedValues();
                }
                return this.mLoginAssertExpectedValues;
            }
        }
        
        public UIStartmenuPane UIStartmenuPane
        {
            get
            {
                if ((this.mUIStartmenuPane == null))
                {
                    this.mUIStartmenuPane = new UIStartmenuPane();
                }
                return this.mUIStartmenuPane;
            }
        }
        
        public UIPTSWindow UIPTSWindow
        {
            get
            {
                if ((this.mUIPTSWindow == null))
                {
                    this.mUIPTSWindow = new UIPTSWindow();
                }
                return this.mUIPTSWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private LoginAssertExpectedValues mLoginAssertExpectedValues;
        
        private UIStartmenuPane mUIStartmenuPane;
        
        private UIPTSWindow mUIPTSWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'RAP Report' label equals 'RAP Report'
        /// </summary>
        public string UIRAPReportTextName = "RAP Report";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class LoginAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Login' label equals 'Login'
        /// </summary>
        public string UILoginTextName = "Login";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIStartmenuPane : UITestControl
    {
        
        public UIStartmenuPane()
        {
            #region Search Criteria
            this.TechnologyName = "UIA";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Pane";
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Start menu";
            this.SearchProperties["FrameworkId"] = "Win32";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "ImmersiveLauncher";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public UIStartAppsList UIStartAppsList
        {
            get
            {
                if ((this.mUIStartAppsList == null))
                {
                    this.mUIStartAppsList = new UIStartAppsList(this);
                }
                return this.mUIStartAppsList;
            }
        }
        #endregion
        
        #region Fields
        private UIStartAppsList mUIStartAppsList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIStartAppsList : DirectUIControl
    {
        
        public UIStartAppsList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DirectUIControl.PropertyNames.AutomationId] = "GridRoot";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public UIMailGroup UIMailGroup
        {
            get
            {
                if ((this.mUIMailGroup == null))
                {
                    this.mUIMailGroup = new UIMailGroup(this);
                }
                return this.mUIMailGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIMailGroup mUIMailGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMailGroup : DirectUIControl
    {
        
        public UIMailGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DirectUIControl.PropertyNames.AutomationId] = "Group 2305843009213693952";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public DirectUIControl UIPTSListItem
        {
            get
            {
                if ((this.mUIPTSListItem == null))
                {
                    this.mUIPTSListItem = new DirectUIControl(this);
                    #region Search Criteria
                    this.mUIPTSListItem.SearchProperties[DirectUIControl.PropertyNames.AutomationId] = "15fa5c6d-509c-4ea1-9459-cb4b0a9a0b35_bqdmac4rycgqj!App";
                    this.mUIPTSListItem.WindowTitles.Add("Start menu");
                    #endregion
                }
                return this.mUIPTSListItem;
            }
        }
        #endregion
        
        #region Fields
        private DirectUIControl mUIPTSListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIPTSWindow : XamlWindow
    {
        
        public UIPTSWindow()
        {
            #region Search Criteria
            this.SearchProperties[XamlControl.PropertyNames.Name] = "PTS";
            this.SearchProperties[XamlControl.PropertyNames.ClassName] = "Windows.UI.Core.CoreWindow";
            this.WindowTitles.Add("PTS");
            #endregion
        }
        
        #region Properties
        public XamlEdit UIUserNameTextboxEdit
        {
            get
            {
                if ((this.mUIUserNameTextboxEdit == null))
                {
                    this.mUIUserNameTextboxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIUserNameTextboxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "UserNameTextbox";
                    this.mUIUserNameTextboxEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIUserNameTextboxEdit;
            }
        }
        
        public XamlEdit UIPasswordTextboxEdit
        {
            get
            {
                if ((this.mUIPasswordTextboxEdit == null))
                {
                    this.mUIPasswordTextboxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordTextboxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "PasswordTextbox";
                    this.mUIPasswordTextboxEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIPasswordTextboxEdit;
            }
        }
        
        public XamlButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIItemButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public UIItemPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane(this);
                }
                return this.mUIItemPane;
            }
        }
        
        public UIDatepickerGroup UIDatepickerGroup
        {
            get
            {
                if ((this.mUIDatepickerGroup == null))
                {
                    this.mUIDatepickerGroup = new UIDatepickerGroup(this);
                }
                return this.mUIDatepickerGroup;
            }
        }
        
        public XamlText UIRAPReportText
        {
            get
            {
                if ((this.mUIRAPReportText == null))
                {
                    this.mUIRAPReportText = new XamlText(this);
                    #region Search Criteria
                    this.mUIRAPReportText.SearchProperties[XamlText.PropertyNames.Name] = "RAP Report";
                    this.mUIRAPReportText.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIRAPReportText;
            }
        }
        
        public XamlText UILoginText
        {
            get
            {
                if ((this.mUILoginText == null))
                {
                    this.mUILoginText = new XamlText(this);
                    #region Search Criteria
                    this.mUILoginText.SearchProperties[XamlText.PropertyNames.Name] = "Login";
                    this.mUILoginText.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUILoginText;
            }
        }
        
        public UIScrollViewerPane UIScrollViewerPane
        {
            get
            {
                if ((this.mUIScrollViewerPane == null))
                {
                    this.mUIScrollViewerPane = new UIScrollViewerPane(this);
                }
                return this.mUIScrollViewerPane;
            }
        }
        
        public UIIdPhotoCommandBarToolBar UIIdPhotoCommandBarToolBar
        {
            get
            {
                if ((this.mUIIdPhotoCommandBarToolBar == null))
                {
                    this.mUIIdPhotoCommandBarToolBar = new UIIdPhotoCommandBarToolBar(this);
                }
                return this.mUIIdPhotoCommandBarToolBar;
            }
        }
        
        public XamlButton UINewilpButton
        {
            get
            {
                if ((this.mUINewilpButton == null))
                {
                    this.mUINewilpButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUINewilpButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "Newilp";
                    this.mUINewilpButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUINewilpButton;
            }
        }
        
        public XamlText UIItem1999Text
        {
            get
            {
                if ((this.mUIItem1999Text == null))
                {
                    this.mUIItem1999Text = new XamlText(this);
                    #region Search Criteria
                    this.mUIItem1999Text.SearchProperties[XamlText.PropertyNames.Name] = "‎1999";
                    this.mUIItem1999Text.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIItem1999Text;
            }
        }
        
        public XamlText UIItem2009Text
        {
            get
            {
                if ((this.mUIItem2009Text == null))
                {
                    this.mUIItem2009Text = new XamlText(this);
                    #region Search Criteria
                    this.mUIItem2009Text.SearchProperties[XamlText.PropertyNames.Name] = "‎2009";
                    this.mUIItem2009Text.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIItem2009Text;
            }
        }
        
        public XamlButton UIBackButton
        {
            get
            {
                if ((this.mUIBackButton == null))
                {
                    this.mUIBackButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIBackButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "BackButton";
                    this.mUIBackButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIBackButton;
            }
        }
        
        public UIDatepickerGroup1 UIDatepickerGroup1
        {
            get
            {
                if ((this.mUIDatepickerGroup1 == null))
                {
                    this.mUIDatepickerGroup1 = new UIDatepickerGroup1(this);
                }
                return this.mUIDatepickerGroup1;
            }
        }
        
        public UIDatepickerGroup2 UIDatepickerGroup2
        {
            get
            {
                if ((this.mUIDatepickerGroup2 == null))
                {
                    this.mUIDatepickerGroup2 = new UIDatepickerGroup2(this);
                }
                return this.mUIDatepickerGroup2;
            }
        }
        #endregion
        
        #region Fields
        private XamlEdit mUIUserNameTextboxEdit;
        
        private XamlEdit mUIPasswordTextboxEdit;
        
        private XamlButton mUIItemButton;
        
        private UIItemPane mUIItemPane;
        
        private UIDatepickerGroup mUIDatepickerGroup;
        
        private XamlText mUIRAPReportText;
        
        private XamlText mUILoginText;
        
        private UIScrollViewerPane mUIScrollViewerPane;
        
        private UIIdPhotoCommandBarToolBar mUIIdPhotoCommandBarToolBar;
        
        private XamlButton mUINewilpButton;
        
        private XamlText mUIItem1999Text;
        
        private XamlText mUIItem2009Text;
        
        private XamlButton mUIBackButton;
        
        private UIDatepickerGroup1 mUIDatepickerGroup1;
        
        private UIDatepickerGroup2 mUIDatepickerGroup2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemPane : XamlControl
    {
        
        public UIItemPane(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Pane";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "ScrollViewer";
            this.WindowTitles.Add("PTS");
            #endregion
        }
        
        #region Properties
        public XamlEdit UIArrivedFromTextBoxEdit
        {
            get
            {
                if ((this.mUIArrivedFromTextBoxEdit == null))
                {
                    this.mUIArrivedFromTextBoxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIArrivedFromTextBoxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "ArrivedFromTextBox";
                    this.mUIArrivedFromTextBoxEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIArrivedFromTextBoxEdit;
            }
        }
        
        public XamlEdit UIFullNameTextBoxEdit
        {
            get
            {
                if ((this.mUIFullNameTextBoxEdit == null))
                {
                    this.mUIFullNameTextBoxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIFullNameTextBoxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "FullNameTextBox";
                    this.mUIFullNameTextBoxEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIFullNameTextBoxEdit;
            }
        }
        
        public XamlComboBox UIGendercomboboxComboBox
        {
            get
            {
                if ((this.mUIGendercomboboxComboBox == null))
                {
                    this.mUIGendercomboboxComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIGendercomboboxComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "Gendercombobox";
                    this.mUIGendercomboboxComboBox.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIGendercomboboxComboBox;
            }
        }
        
        public XamlComboBox UICountryComboboxComboBox
        {
            get
            {
                if ((this.mUICountryComboboxComboBox == null))
                {
                    this.mUICountryComboboxComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUICountryComboboxComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "CountryCombobox";
                    this.mUICountryComboboxComboBox.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUICountryComboboxComboBox;
            }
        }
        
        public XamlEdit UIStateTextBoxEdit
        {
            get
            {
                if ((this.mUIStateTextBoxEdit == null))
                {
                    this.mUIStateTextBoxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIStateTextBoxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "StateTextBox";
                    this.mUIStateTextBoxEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIStateTextBoxEdit;
            }
        }
        
        public XamlEdit UIPhoneNumberTextBoxEdit
        {
            get
            {
                if ((this.mUIPhoneNumberTextBoxEdit == null))
                {
                    this.mUIPhoneNumberTextBoxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIPhoneNumberTextBoxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "PhoneNumberTextBox";
                    this.mUIPhoneNumberTextBoxEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIPhoneNumberTextBoxEdit;
            }
        }
        
        public XamlEdit UIPasssportTextBoxEdit
        {
            get
            {
                if ((this.mUIPasssportTextBoxEdit == null))
                {
                    this.mUIPasssportTextBoxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIPasssportTextBoxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "PasssportTextBox";
                    this.mUIPasssportTextBoxEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIPasssportTextBoxEdit;
            }
        }
        
        public XamlEdit UIVisaNumberTextBoxEdit
        {
            get
            {
                if ((this.mUIVisaNumberTextBoxEdit == null))
                {
                    this.mUIVisaNumberTextBoxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIVisaNumberTextBoxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "VisaNumberTextBox";
                    this.mUIVisaNumberTextBoxEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIVisaNumberTextBoxEdit;
            }
        }
        
        public XamlEdit UIVisaIssuedInComboBoxEdit
        {
            get
            {
                if ((this.mUIVisaIssuedInComboBoxEdit == null))
                {
                    this.mUIVisaIssuedInComboBoxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIVisaIssuedInComboBoxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "VisaIssuedInComboBox";
                    this.mUIVisaIssuedInComboBoxEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIVisaIssuedInComboBoxEdit;
            }
        }
        
        public XamlComboBox UIVisaTypeComboBoxComboBox
        {
            get
            {
                if ((this.mUIVisaTypeComboBoxComboBox == null))
                {
                    this.mUIVisaTypeComboBoxComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIVisaTypeComboBoxComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "VisaTypeComboBox";
                    this.mUIVisaTypeComboBoxComboBox.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIVisaTypeComboBoxComboBox;
            }
        }
        
        public XamlEdit UIPurposeOfVisitTextBoEdit
        {
            get
            {
                if ((this.mUIPurposeOfVisitTextBoEdit == null))
                {
                    this.mUIPurposeOfVisitTextBoEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIPurposeOfVisitTextBoEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "PurposeOfVisitTextBox";
                    this.mUIPurposeOfVisitTextBoEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIPurposeOfVisitTextBoEdit;
            }
        }
        
        public XamlButton UIUploadButtonButtonButton
        {
            get
            {
                if ((this.mUIUploadButtonButtonButton == null))
                {
                    this.mUIUploadButtonButtonButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIUploadButtonButtonButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "UploadButtonButton";
                    this.mUIUploadButtonButtonButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIUploadButtonButtonButton;
            }
        }
        
        public XamlButton UIPhotoButton
        {
            get
            {
                if ((this.mUIPhotoButton == null))
                {
                    this.mUIPhotoButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIPhotoButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "PhotoAppBarButton";
                    this.mUIPhotoButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIPhotoButton;
            }
        }
        
        public XamlButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[XamlButton.PropertyNames.Name] = "Add";
                    this.mUIAddButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        
        public XamlButton UISaveAndPrintButtonButton
        {
            get
            {
                if ((this.mUISaveAndPrintButtonButton == null))
                {
                    this.mUISaveAndPrintButtonButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUISaveAndPrintButtonButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "SaveAndPrintButton";
                    this.mUISaveAndPrintButtonButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUISaveAndPrintButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private XamlEdit mUIArrivedFromTextBoxEdit;
        
        private XamlEdit mUIFullNameTextBoxEdit;
        
        private XamlComboBox mUIGendercomboboxComboBox;
        
        private XamlComboBox mUICountryComboboxComboBox;
        
        private XamlEdit mUIStateTextBoxEdit;
        
        private XamlEdit mUIPhoneNumberTextBoxEdit;
        
        private XamlEdit mUIPasssportTextBoxEdit;
        
        private XamlEdit mUIVisaNumberTextBoxEdit;
        
        private XamlEdit mUIVisaIssuedInComboBoxEdit;
        
        private XamlComboBox mUIVisaTypeComboBoxComboBox;
        
        private XamlEdit mUIPurposeOfVisitTextBoEdit;
        
        private XamlButton mUIUploadButtonButtonButton;
        
        private XamlButton mUIPhotoButton;
        
        private XamlButton mUIAddButton;
        
        private XamlButton mUISaveAndPrintButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDatepickerGroup : XamlControl
    {
        
        public UIDatepickerGroup(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Group";
            this.SearchProperties["AutomationId"] = "DateOfBirth";
            this.WindowTitles.Add("PTS");
            #endregion
        }
        
        #region Properties
        public XamlComboBox UIYearComboBox
        {
            get
            {
                if ((this.mUIYearComboBox == null))
                {
                    this.mUIYearComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIYearComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "YearPicker";
                    this.mUIYearComboBox.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIYearComboBox;
            }
        }
        #endregion
        
        #region Fields
        private XamlComboBox mUIYearComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIScrollViewerPane : XamlControl
    {
        
        public UIScrollViewerPane(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Pane";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "ScrollViewer";
            this.SearchProperties["AutomationId"] = "scrollViewer";
            this.WindowTitles.Add("PTS");
            #endregion
        }
        
        #region Properties
        public XamlText UIPermitnoGOSTourismRAText
        {
            get
            {
                if ((this.mUIPermitnoGOSTourismRAText == null))
                {
                    this.mUIPermitnoGOSTourismRAText = new XamlText(this);
                    #region Search Criteria
                    this.mUIPermitnoGOSTourismRAText.SearchProperties[XamlText.PropertyNames.Name] = "Permit no.GOS/Tourism/RAP/RA150113151950\r\n";
                    this.mUIPermitnoGOSTourismRAText.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIPermitnoGOSTourismRAText;
            }
        }
        
        public UIHelpandassistanceTelText UIHelpandassistanceTelText
        {
            get
            {
                if ((this.mUIHelpandassistanceTelText == null))
                {
                    this.mUIHelpandassistanceTelText = new UIHelpandassistanceTelText(this);
                }
                return this.mUIHelpandassistanceTelText;
            }
        }
        
        public XamlText UIRESTRICTEDAREAPERMITText
        {
            get
            {
                if ((this.mUIRESTRICTEDAREAPERMITText == null))
                {
                    this.mUIRESTRICTEDAREAPERMITText = new XamlText(this);
                    #region Search Criteria
                    this.mUIRESTRICTEDAREAPERMITText.SearchProperties[XamlText.PropertyNames.Name] = "RESTRICTED AREA PERMIT \r\n";
                    this.mUIRESTRICTEDAREAPERMITText.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIRESTRICTEDAREAPERMITText;
            }
        }
        #endregion
        
        #region Fields
        private XamlText mUIPermitnoGOSTourismRAText;
        
        private UIHelpandassistanceTelText mUIHelpandassistanceTelText;
        
        private XamlText mUIRESTRICTEDAREAPERMITText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIHelpandassistanceTelText : XamlText
    {
        
        public UIHelpandassistanceTelText(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[XamlText.PropertyNames.Name] = "Help and assistance Tel.Phone no\'s: 03592-202825/204408/209090\r\n";
            this.WindowTitles.Add("PTS");
            #endregion
        }
        
        #region Properties
        public XamlControl UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new XamlControl(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    this.mUIItemImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemImage.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private XamlControl mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIIdPhotoCommandBarToolBar : DirectUIControl
    {
        
        public UIIdPhotoCommandBarToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DirectUIControl.PropertyNames.AutomationId] = "idPhotoCommandBar";
            this.WindowTitles.Add("PTS");
            #endregion
        }
        
        #region Properties
        public DirectUIControl UIAcceptcurrentphotoButton
        {
            get
            {
                if ((this.mUIAcceptcurrentphotoButton == null))
                {
                    this.mUIAcceptcurrentphotoButton = new DirectUIControl(this);
                    #region Search Criteria
                    this.mUIAcceptcurrentphotoButton.SearchProperties[DirectUIControl.PropertyNames.AutomationId] = "idPhotoAcceptBtn";
                    this.mUIAcceptcurrentphotoButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIAcceptcurrentphotoButton;
            }
        }
        #endregion
        
        #region Fields
        private DirectUIControl mUIAcceptcurrentphotoButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDatepickerGroup1 : XamlControl
    {
        
        public UIDatepickerGroup1(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Group";
            this.SearchProperties["AutomationId"] = "PermitDatetoDatepicker";
            this.WindowTitles.Add("PTS");
            #endregion
        }
        
        #region Properties
        public XamlComboBox UIDayComboBox
        {
            get
            {
                if ((this.mUIDayComboBox == null))
                {
                    this.mUIDayComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIDayComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "DayPicker";
                    this.mUIDayComboBox.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIDayComboBox;
            }
        }
        
        public XamlComboBox UIMonthComboBox
        {
            get
            {
                if ((this.mUIMonthComboBox == null))
                {
                    this.mUIMonthComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIMonthComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "MonthPicker";
                    this.mUIMonthComboBox.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIMonthComboBox;
            }
        }
        #endregion
        
        #region Fields
        private XamlComboBox mUIDayComboBox;
        
        private XamlComboBox mUIMonthComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDatepickerGroup2 : XamlControl
    {
        
        public UIDatepickerGroup2(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Group";
            this.SearchProperties["AutomationId"] = "PermitDateFromDatepicker";
            this.WindowTitles.Add("PTS");
            #endregion
        }
        
        #region Properties
        public XamlComboBox UIDayComboBox
        {
            get
            {
                if ((this.mUIDayComboBox == null))
                {
                    this.mUIDayComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIDayComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "DayPicker";
                    this.mUIDayComboBox.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIDayComboBox;
            }
        }
        
        public XamlComboBox UIMonthComboBox
        {
            get
            {
                if ((this.mUIMonthComboBox == null))
                {
                    this.mUIMonthComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIMonthComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "MonthPicker";
                    this.mUIMonthComboBox.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIMonthComboBox;
            }
        }
        #endregion
        
        #region Fields
        private XamlComboBox mUIDayComboBox;
        
        private XamlComboBox mUIMonthComboBox;
        #endregion
    }
}
