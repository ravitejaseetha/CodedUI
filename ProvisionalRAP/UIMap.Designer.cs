// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace ProvisionalRAP
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITest.Input;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.DirectUIControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WindowsRuntimeControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = Microsoft.VisualStudio.TestTools.UITest.Input.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RAP - Use 'RAPExpectedValues' to pass parameters into this method.
        /// </summary>
        public void RAP()
        {
            #region Variable Declarations
            XamlText uIRAPReportText = this.UIPTSWindow.UIRAPReportText;
            #endregion

            // Verify that the 'Name' property of 'RAP Report' label equals 'RAP Report'
            Assert.AreEqual(this.RAPExpectedValues.UIRAPReportTextName, uIRAPReportText.Name, "RAP not found");
        }
        
        #region Properties
        public virtual RAPExpectedValues RAPExpectedValues
        {
            get
            {
                if ((this.mRAPExpectedValues == null))
                {
                    this.mRAPExpectedValues = new RAPExpectedValues();
                }
                return this.mRAPExpectedValues;
            }
        }
        
        public UIPTSWindow UIPTSWindow
        {
            get
            {
                if ((this.mUIPTSWindow == null))
                {
                    this.mUIPTSWindow = new UIPTSWindow();
                }
                return this.mUIPTSWindow;
            }
        }
        
        public UIStartmenuPane UIStartmenuPane
        {
            get
            {
                if ((this.mUIStartmenuPane == null))
                {
                    this.mUIStartmenuPane = new UIStartmenuPane();
                }
                return this.mUIStartmenuPane;
            }
        }
        #endregion
        
        #region Fields
        private RAPExpectedValues mRAPExpectedValues;
        
        private UIPTSWindow mUIPTSWindow;
        
        private UIStartmenuPane mUIStartmenuPane;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RAP'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RAPExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'RAP Report' label equals 'RAP Report'
        /// </summary>
        public string UIRAPReportTextName = "RAP Report";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIPTSWindow : XamlWindow
    {
        
        public UIPTSWindow()
        {
            #region Search Criteria
            this.SearchProperties[XamlControl.PropertyNames.Name] = "PTS";
            this.SearchProperties[XamlControl.PropertyNames.ClassName] = "Windows.UI.Core.CoreWindow";
            this.WindowTitles.Add("PTS");
            #endregion
        }
        
        #region Properties
        public UIItemList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new UIItemList(this);
                }
                return this.mUIItemList;
            }
        }
        
        public XamlButton UISearchButton
        {
            get
            {
                if ((this.mUISearchButton == null))
                {
                    this.mUISearchButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUISearchButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "Search";
                    this.mUISearchButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUISearchButton;
            }
        }
        
        public UIItemPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane(this);
                }
                return this.mUIItemPane;
            }
        }
        
        public UIIdPhotoCommandBarToolBar UIIdPhotoCommandBarToolBar
        {
            get
            {
                if ((this.mUIIdPhotoCommandBarToolBar == null))
                {
                    this.mUIIdPhotoCommandBarToolBar = new UIIdPhotoCommandBarToolBar(this);
                }
                return this.mUIIdPhotoCommandBarToolBar;
            }
        }
        
        public UIDatepickerGroup UIDatepickerGroup
        {
            get
            {
                if ((this.mUIDatepickerGroup == null))
                {
                    this.mUIDatepickerGroup = new UIDatepickerGroup(this);
                }
                return this.mUIDatepickerGroup;
            }
        }
        
        public XamlEdit UIUserNameTextboxEdit
        {
            get
            {
                if ((this.mUIUserNameTextboxEdit == null))
                {
                    this.mUIUserNameTextboxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIUserNameTextboxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "UserNameTextbox";
                    this.mUIUserNameTextboxEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIUserNameTextboxEdit;
            }
        }
        
        public XamlEdit UIPasswordTextboxEdit
        {
            get
            {
                if ((this.mUIPasswordTextboxEdit == null))
                {
                    this.mUIPasswordTextboxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordTextboxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "PasswordTextbox";
                    this.mUIPasswordTextboxEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIPasswordTextboxEdit;
            }
        }
        
        public XamlButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "Login";
                    this.mUILoginButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        
        public XamlEdit UIPassportSearchTextBoEdit
        {
            get
            {
                if ((this.mUIPassportSearchTextBoEdit == null))
                {
                    this.mUIPassportSearchTextBoEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIPassportSearchTextBoEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "PassportSearchTextBox";
                    this.mUIPassportSearchTextBoEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIPassportSearchTextBoEdit;
            }
        }
        
        public XamlButton UIPassportSearchButtonButton
        {
            get
            {
                if ((this.mUIPassportSearchButtonButton == null))
                {
                    this.mUIPassportSearchButtonButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIPassportSearchButtonButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "PassportSearchButton";
                    this.mUIPassportSearchButtonButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIPassportSearchButtonButton;
            }
        }
        
        public XamlText UIRAPReportText
        {
            get
            {
                if ((this.mUIRAPReportText == null))
                {
                    this.mUIRAPReportText = new XamlText(this);
                    #region Search Criteria
                    this.mUIRAPReportText.SearchProperties[XamlText.PropertyNames.Name] = "RAP Report";
                    this.mUIRAPReportText.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIRAPReportText;
            }
        }
        #endregion
        
        #region Fields
        private UIItemList mUIItemList;
        
        private XamlButton mUISearchButton;
        
        private UIItemPane mUIItemPane;
        
        private UIIdPhotoCommandBarToolBar mUIIdPhotoCommandBarToolBar;
        
        private UIDatepickerGroup mUIDatepickerGroup;
        
        private XamlEdit mUIUserNameTextboxEdit;
        
        private XamlEdit mUIPasswordTextboxEdit;
        
        private XamlButton mUILoginButton;
        
        private XamlEdit mUIPassportSearchTextBoEdit;
        
        private XamlButton mUIPassportSearchButtonButton;
        
        private XamlText mUIRAPReportText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemList : XamlList
    {
        
        public UIItemList(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("PTS");
            #endregion
        }
        
        #region Properties
        public XamlListItem UIPtsModelTouristListItem
        {
            get
            {
                if ((this.mUIPtsModelTouristListItem == null))
                {
                    this.mUIPtsModelTouristListItem = new XamlListItem(this);
                    #region Search Criteria
                    this.mUIPtsModelTouristListItem.SearchProperties[XamlListItem.PropertyNames.Name] = "Pts.Model.Tourist";
                    this.mUIPtsModelTouristListItem.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIPtsModelTouristListItem;
            }
        }
        
        public XamlListItem UIPtsModelTouristListItem1
        {
            get
            {
                if ((this.mUIPtsModelTouristListItem1 == null))
                {
                    this.mUIPtsModelTouristListItem1 = new XamlListItem(this);
                    #region Search Criteria
                    this.mUIPtsModelTouristListItem1.SearchProperties[XamlListItem.PropertyNames.Name] = "Pts.Model.Tourist";
                    this.mUIPtsModelTouristListItem1.SearchProperties[XamlListItem.PropertyNames.Instance] = "2";
                    this.mUIPtsModelTouristListItem1.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIPtsModelTouristListItem1;
            }
        }
        
        public XamlListItem UIPtsModelTouristListItem2
        {
            get
            {
                if ((this.mUIPtsModelTouristListItem2 == null))
                {
                    this.mUIPtsModelTouristListItem2 = new XamlListItem(this);
                    #region Search Criteria
                    this.mUIPtsModelTouristListItem2.SearchProperties[XamlListItem.PropertyNames.Name] = "Pts.Model.Tourist";
                    this.mUIPtsModelTouristListItem2.SearchProperties[XamlListItem.PropertyNames.Instance] = "3";
                    this.mUIPtsModelTouristListItem2.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIPtsModelTouristListItem2;
            }
        }
        #endregion
        
        #region Fields
        private XamlListItem mUIPtsModelTouristListItem;
        
        private XamlListItem mUIPtsModelTouristListItem1;
        
        private XamlListItem mUIPtsModelTouristListItem2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemPane : XamlControl
    {
        
        public UIItemPane(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Pane";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "ScrollViewer";
            this.WindowTitles.Add("PTS");
            #endregion
        }
        
        #region Properties
        public XamlEdit UIArrivedFromTextBoxEdit
        {
            get
            {
                if ((this.mUIArrivedFromTextBoxEdit == null))
                {
                    this.mUIArrivedFromTextBoxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIArrivedFromTextBoxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "ArrivedFromTextBox";
                    this.mUIArrivedFromTextBoxEdit.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIArrivedFromTextBoxEdit;
            }
        }
        
        public XamlButton UIUploadButtonButtonButton
        {
            get
            {
                if ((this.mUIUploadButtonButtonButton == null))
                {
                    this.mUIUploadButtonButtonButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIUploadButtonButtonButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "UploadButtonButton";
                    this.mUIUploadButtonButtonButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIUploadButtonButtonButton;
            }
        }
        
        public XamlButton UIPhotoButton
        {
            get
            {
                if ((this.mUIPhotoButton == null))
                {
                    this.mUIPhotoButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIPhotoButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "PhotoAppBarButton";
                    this.mUIPhotoButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIPhotoButton;
            }
        }
        
        public XamlButton UIUpdateButton
        {
            get
            {
                if ((this.mUIUpdateButton == null))
                {
                    this.mUIUpdateButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIUpdateButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "UpdateButton";
                    this.mUIUpdateButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIUpdateButton;
            }
        }
        
        public XamlButton UISaveAndPrintButtonButton
        {
            get
            {
                if ((this.mUISaveAndPrintButtonButton == null))
                {
                    this.mUISaveAndPrintButtonButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUISaveAndPrintButtonButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "SaveAndPrintButton";
                    this.mUISaveAndPrintButtonButton.WindowTitles.Add("PTS");
                    Console.WriteLine("Control Exists" + this.UISaveAndPrintButtonButton.GetProperty(XamlButton.PropertyNames.Exists));
                    #endregion
                }
                return this.mUISaveAndPrintButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private XamlEdit mUIArrivedFromTextBoxEdit;
        
        private XamlButton mUIUploadButtonButtonButton;
        
        private XamlButton mUIPhotoButton;
        
        private XamlButton mUIUpdateButton;
        
        private XamlButton mUISaveAndPrintButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIIdPhotoCommandBarToolBar : DirectUIControl
    {
        
        public UIIdPhotoCommandBarToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DirectUIControl.PropertyNames.AutomationId] = "idPhotoCommandBar";
            this.WindowTitles.Add("PTS");
            #endregion
        }
        
        #region Properties
        public DirectUIControl UIAcceptcurrentphotoButton
        {
            get
            {
                if ((this.mUIAcceptcurrentphotoButton == null))
                {
                    this.mUIAcceptcurrentphotoButton = new DirectUIControl(this);
                    #region Search Criteria
                    this.mUIAcceptcurrentphotoButton.SearchProperties[DirectUIControl.PropertyNames.AutomationId] = "idPhotoAcceptBtn";
                    this.mUIAcceptcurrentphotoButton.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIAcceptcurrentphotoButton;
            }
        }
        #endregion
        
        #region Fields
        private DirectUIControl mUIAcceptcurrentphotoButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDatepickerGroup : XamlControl
    {
        
        public UIDatepickerGroup(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Group";
            this.SearchProperties["AutomationId"] = "PermitDatetoDatepicker";
            this.WindowTitles.Add("PTS");
            #endregion
        }
        
        #region Properties
        public XamlComboBox UIDayComboBox
        {
            get
            {
                if ((this.mUIDayComboBox == null))
                {
                    this.mUIDayComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIDayComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "DayPicker";
                    this.mUIDayComboBox.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIDayComboBox;
            }
        }
        
        public XamlComboBox UIMonthComboBox
        {
            get
            {
                if ((this.mUIMonthComboBox == null))
                {
                    this.mUIMonthComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIMonthComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "MonthPicker";
                    this.mUIMonthComboBox.WindowTitles.Add("PTS");
                    #endregion
                }
                return this.mUIMonthComboBox;
            }
        }
        #endregion
        
        #region Fields
        private XamlComboBox mUIDayComboBox;
        
        private XamlComboBox mUIMonthComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIStartmenuPane : UITestControl
    {
        
        public UIStartmenuPane()
        {
            #region Search Criteria
            this.TechnologyName = "UIA";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Pane";
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Start menu";
            this.SearchProperties["FrameworkId"] = "Win32";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "ImmersiveLauncher";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public UIStartAppsList UIStartAppsList
        {
            get
            {
                if ((this.mUIStartAppsList == null))
                {
                    this.mUIStartAppsList = new UIStartAppsList(this);
                }
                return this.mUIStartAppsList;
            }
        }
        #endregion
        
        #region Fields
        private UIStartAppsList mUIStartAppsList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIStartAppsList : DirectUIControl
    {
        
        public UIStartAppsList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DirectUIControl.PropertyNames.AutomationId] = "GridRoot";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public UIMailGroup UIMailGroup
        {
            get
            {
                if ((this.mUIMailGroup == null))
                {
                    this.mUIMailGroup = new UIMailGroup(this);
                }
                return this.mUIMailGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIMailGroup mUIMailGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMailGroup : DirectUIControl
    {
        
        public UIMailGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DirectUIControl.PropertyNames.AutomationId] = "Group 2305843009213693952";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public DirectUIControl UIPTSListItem
        {
            get
            {
                if ((this.mUIPTSListItem == null))
                {
                    this.mUIPTSListItem = new DirectUIControl(this);
                    #region Search Criteria
                    this.mUIPTSListItem.SearchProperties[DirectUIControl.PropertyNames.AutomationId] = "15fa5c6d-509c-4ea1-9459-cb4b0a9a0b35_bqdmac4rycgqj!App";
                    this.mUIPTSListItem.WindowTitles.Add("Start menu");
                    #endregion
                }
                return this.mUIPTSListItem;
            }
        }
        #endregion
        
        #region Fields
        private DirectUIControl mUIPTSListItem;
        #endregion
    }
}
